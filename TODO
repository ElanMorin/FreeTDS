This list is ordered top-to-bottom by priority.  
Things that are broken and need mending are at the top, 
followed by things that should work before the next release, 
followed by features that should be added/fixed/reworked (grouped by library).  

Everyone is encouraged to add to the list.  Developers can do it directly; 
anyone else can post a patch to Source Forge.  
In this way we can communicate with each
other about the project's priorities and needs.  

To Do List	$Id: TODO,v 1.30 2003/01/12 10:05:02 freddy77 Exp $
------------
Broken:
. tds_connect free tds structure on failure. This cause in some condition
  a pointer to garbage in some library

For 0.61 version:

For 0.62 version:
. Move website docs (not UG) to doc/htdoc, put in CVS
. add doc/htdoc/Makefile with "publish" target to commit cvs and update freetds.org
. drop txt2man from cvs, skip building man pages without it. 
. Add doxygen to the nightly build
. "make install" should put the UG in PREFIX/share/doc/freetds/userguide
. "make install" should put doxygen html in PREFIX/share/doc/freetds/reference
. Rename TDS 8.0 to TDS 7.1, to be consistent with Microsoft's name
. Rationalize libtds structure and *_alloc functions (ML 5 December, sb:"names")
. ct_dynamic and friends needed for DBD::Sybase placeholder support (work in progress)

For future versions (in priority order within library):
  All:
. move error message macro/prototype to tds.h.in; use in dblib.c.
. Remove old char(30) limitations to various sysnames e.g., tables, columns, passwords (checks).  Is this done?  
. Add missing constants needed for python and verify working
. Add missing constants needed for Gnome-DB and verify working 
. conversion from ucs2 to utf8, provide for 2+ bytes/character.
. Autodetect TDS protocol when connecting (and cache somewhere?)
. support for VARIANT type
. tdsping program for testing purposes
. Finish off the TDS dissector for ethereal
. more solid. handle out of memory conditions (started, we must test all allocation and all function that return allocated data and be able to rollback to a safe state)
. optimize numeric conversions 
. limit copy of data (now wire -> tds -> temp -> client)
. All manner of unimplemented functions (see doc/api_status.txt)

  ct-lib
. cs_calc and cs_cmp, for sybperl
. DBD::Sybase uses the ct_command(CS_RPC_CMD) and ct_param()
. ct_get/send_data()
. ct_option() calls (CS_OPT_ROWCOUNT, CS_OPT_TEXTSIZE, among others)
. Array binding for ctlib not working
. async function, async calls (dbpoll() and friends)
. bcp support to ctlib
. support all type of bind in ct_bind (CS_VARBINARY_TYPE and other)
  search "site:.sybase.com CS_VARBINARY ct_bind" on google for more info
. support ct_command/CS_SEND_DATA_CMD, now crash
  (see http://manuals.sybase.com/onlinebooks/group-cn/cng1000e/ref/@Generic__BookTextView/50456)

  odbc
. Someone broke early binding in ODBC
. dynamic query (need rewrite SQLPrepare and related) (support binding parameters for all types)
. dynamic query (work in progress, lack unprepare)
. get a solid corpus of unittests for ODBC, and have it become a top tier API.
. improve, best error report (finish and test, see error.c FIXME and TODO)
. cursor support
. how work mssql driver using SQLMoreResults/SQLRowCount and batch like 
  SELECT INSERT INSERT SELECT ?

  pool
. get connection pooling working with all protocol versions
. Make pool configuration a non-recompile process

  server
. Server API needs more work, especially for TDS 5.0/7.0

Tests
- "if 0 = 1 select 1" should not fail

Done (removed from above):
. Add bcp support to tds/dblib/ctlib. (started in dblib)
. RPC stuff not implemented (work in progress, libtds ok)
. Add support for TDS 8.0 (login works)
. TDS 7 Unicode to native charset conversion using iconv (partly done)
. autoconf the connection pooling stuff
. DBLIB: output params (tests)
. set database during login process

