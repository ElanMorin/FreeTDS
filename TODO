This list is ordered top-to-bottom by priority.  
Things that are broken and need mending are at the top, 
followed by things that should work before the next release, 
followed by features that should be added/fixed/reworked (grouped by library).  

Everyone is encouraged to add to the list.  Developers can do it directly; 
anyone else can post a patch to Source Forge.  
In this way we can communicate with each
other about the project's priorities and needs.  

To Do List	$Id: TODO,v 1.151 2005/08/02 19:15:52 freddy77 Exp $
------------

Must be fixed in 0.64:
. dblib buffering, not save lengths, blob not correctly handled
. ctlib parameters, handle all case even in tds7
. fix all regression tests
  . odbc array binding (see odbc tests)
. cancellation
  . ctlib seems to hang reading row while in IDLE state
    (tds_peek if not in pending state hang... update)

Broken:
. Passing invalid character set names to server with tsql?
  tsql (and so libTDS) can pass invalid charset names to Sybase
  libTDS assume Sybase can handle this charset but it's false
  and doesn't convert correctly.

Working in progress:
. fix timeout problem reported in ML
  . check dblib behavior

Postponed to 0.64 version
. log and call error handler on problems with tds_iconv_init().
. iconv
  - support string conversions for Sybase
  - add test for locale_charset() to configure.in.  Use it if available
    instead of nl_langinfo, because it implies we're using GNU iconv
. add doc/htdoc/Makefile with "publish" target to commit cvs and update
  freetds.org
. drop txt2man from cvs, skip building man pages without it. 
. be able to disable iconv for BCP (see Sybase documentation)
. userguide
  - update table of working configurations
    server (vendor, version, platform) - client (freetds version, platform) 
    - protocol - charsets - date

For future versions (in priority order within library):
  All:
. move error message macro/prototype to tds.h.in; use in dblib.c.
. Add missing constants needed for python and verify working
. Add missing constants needed for Gnome-DB and verify working 
. conversion from ucs2 to utf8, provide for 2+ bytes/character
. tdsping program for testing purposes
. Finish off the TDS dissector for ethereal
. more solid. handle out of memory conditions (started, we must test all 
  allocation and all function that return allocated data and be able to 
  rollback to a safe state)
. optimize numeric conversions (partial, handle numeric->int and similar directly)
  change precision (multiply/divide by 10^n) and extract number
  checking overflow/underflow
  change precision done (numeric.c)
  numeric done, change numeric format to improve performance
  . little/big endian based on platform
  . already packet at word
  . correctly aligned to read directly packetized
. limit copy of data (now wire -> tds -> temp -> client)
  use a method like zero-copy
  In token.c getting row should write data even to client
  (callback, new user types, see ctlib conversion functions)
  In query.c writing data do the same (use additional column fields?)
. review the way parameters are packed 
  (too complicate, see ctlib bulk, cf "bulk copy and row buffer")
. cursor support (limited support on ctlib)
. Autodetect TDS protocol when connecting (and cache somewhere?)
. support for VARIANT type (requested one time, 2003-8-1)
. support for NT named pipe (requested many time ago for mssql6.5 server, only
  for completeness). If anybody knows a library to handle named pipes
  compatible with LGPL please tell us.
. NTLMv2 domain login support.  Cf. ML 5 Aug 2003 12:20:21 -0700 (PDT) 
  from bradleyb@u.washington.edu re: "Domain Login Support, connecting to MSSQL issue"
  and http://davenport.sourceforge.net/ntlm.html.  For now, document.
  (see http://linux-cifs.samba.org/ for LGPL implementation)
. read on partial packet, do not wait entire one
. detect if realloc/free accepts NULL pointers (in configure.in)
. support for password longer than 30 characters under Sybase
  (anybody know how ??)
. under Sybase using prepared statements and BLOBs we shouldn't try to
  prepare every time (cache failure preparing, see odbc unittests logs,
  binary_test)
  done in ODBC ??
. Native bcp has no iconv support; character bcp files are assumed be encoded
  with the client's charset.  More flexibility one both sides would be good.  
. date/time on Sybase (from 12.5)
. encrypted connection for Sybase

  db-lib
. Returning INT_CANCEL from an error handler doesn't always engender FAIL. 
. add DBTEXTLIMIT (dbsetopt), PHP require it to support textlimit ini value

  ct-lib
. dynamic placeholders (DBD::Sybase)
. ct_option() calls (CS_OPT_ROWCOUNT, CS_OPT_TEXTSIZE, among others)
. async function, async calls (dbpoll() and friends)
. support all type of bind in ct_bind (CS_VARBINARY_TYPE and other)
  search "site:.sybase.com CS_VARBINARY ct_bind" on google for more info
. complete sqlstate and other field in message (for Python)

  odbc
. Star Office complains that these TypeInfo constants are not implemented in SQLGetInfo:
	47      SQL_USER_NAME
  (handle environment callbacks)
  do a "SELECT USER_NAME()". If data pending MS do another connection with 
  same login.
. SQLNativeSql and fill SQLGetInfo according (mssql7+ handle odbc escapes 
  directly)
. SQLDescribeParam (Sybase seems to require it)
. change ODBC_RETURN to return errs.lastrc (not to set) and use errs.lastrc
  to store error, cache some errors (truncated output)
  optimize ODBC_RETURN (remove useless)
. handle no termination on odbc_set_string*
. cursors support
. *W functions support (wide version, ODBC 3.51)
. handle async flags ??
. it seems that if statement it's wrong and we issue SQLPrepare on SQLExecute
  it try to send unprepared dynamic... state on dynamic??

. test and fix: hidden fields (FOR BROWSE select, see flag test on tds)
. test: all binding types (input and output)
. test: descriptors work
  - ODBC 2 type returned (datetime)
  - SQLDescribeCol return ODBC 2 type or 3 or based on configuration?
  - what happen to SQL_DESC_DATETIME_INTERVAL_CODE and SQL_DESC_CONCISE_TYPE
    changing only SQL_DESC_TYPE (with SQLSetDescField)
. test: set SQL_C_DEFAULT and call SQLFetch (numeric, others)
. test: SQLGetStmtAttr(SQL_ATTR_ROW_NUMBER)
  - all binded parameters
  - no bind and sqlgetdata
  - before first fetch
  - after last fetch


  pool
. get connection pooling working with all protocol versions
. Make pool configuration a non-recompile process

  server
. Server API needs more work, especially for TDS 5.0/7.0

Done
