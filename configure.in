dnl Process this file with autoconf to produce a configure script.

dnl ------------------------------------------------------------
dnl Initialization
dnl ------------------------------------------------------------
AC_INIT(src/dblib/dblib.c)
AM_INIT_AUTOMAKE(freetds, 0.60)
AM_CONFIG_HEADER(include/config.h)
AC_PREFIX_DEFAULT(/usr/local)

dnl configuration directory will be /usr/local/etc

dnl ------------------------------------------------------------
dnl Checks for programs.
dnl ------------------------------------------------------------
AC_PROG_CC
AC_PROG_CPP
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_ARG_PROGRAM
AM_PROG_LIBTOOL
AM_ICONV
CHECK_SSL

dnl ------------------------------------------------------------
dnl Checks for libraries.
dnl ------------------------------------------------------------
AC_CHECK_LIB(socket, socket, NETWORK_LIBS="$NETWORK_LIBS -lsocket")
AC_CHECK_LIB(nsl, gethostbyname, NETWORK_LIBS="$NETWORK_LIBS -lnsl")
AC_SUBST(NETWORK_LIBS)

dnl readline test
dnl Readline is needed by the tty session. Set up a special RL_LIBS
dnl substitution for it.
OLDLIBS="$LIBS"
dnl Readline is linked with curses, and on some systems termcap must be
dnl linked in. Others (inc debian) have termcap built into ncurses.
LIBS=""
AC_SEARCH_LIBS(tgetent, [readline ncurses curses termcap])
AC_CHECK_LIB([readline], [readline], [LIBS="$LIBS -lreadline"
  AC_DEFINE(HAVE_READLINE)] )
READLINE_LIBS="$LIBS"
AC_SUBST(READLINE_LIBS)
LIBS="$OLDLIBS"


dnl ------------------------------------------------------------
dnl Checks for header files.
dnl ------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(malloc.h)
AC_CHECK_HEADERS(sys/types.h)
AC_CHECK_HEADERS(sys/socket.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(netinet/in.h)
AC_HAVE_INADDR_NONE

dnl ------------------------------------------------------------
dnl Checks for integers/floats of different sizes
dnl ------------------------------------------------------------
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(__int64)

case 2 in
$ac_cv_sizeof_short)   smallint=short;;
$ac_cv_sizeof_int)     smallint=int;;
esac
case 4 in
$ac_cv_sizeof_short)   int=short;;
$ac_cv_sizeof_int)     int=int;;
$ac_cv_sizeof_long)    int=long;;
esac

case 4 in
$ac_cv_sizeof_float)   real=float;;
$ac_cv_sizeof_double)  real=double;;
*)                     AC_ERROR(No 32-bit float found.)
esac

case 8 in
$ac_cv_sizeof_float)   float=float;;
$ac_cv_sizeof_double)  float=double;;
*)                     AC_ERROR(No 64-bit float found.)
esac

case 8 in
$ac_cv_sizeof_long)    int64=long;;
$ac_cv_sizeof_long_long)   int64="long long";;
$ac_cv_sizeof___int64)    int64=__int64;;
esac

if test "$int64"; then
    AC_DEFINE(HAVE_INT64)
else
    int64=long
fi


AC_SUBST(smallint)
AC_SUBST(int)
AC_SUBST(real)
AC_SUBST(float)
AC_SUBST(int64)

dnl ------------------------------------------------------------
dnl Checks for typedefs and structures
dnl ------------------------------------------------------------

dnl ---- Solaris needs -DBSD_COMP to get FIONBIO defined ----
AC_MSG_CHECKING(is FIONBIO defined)
AC_EGREP_CPP(yes,
[#include <sys/ioctl.h>
#ifdef FIONBIO
 yes
#endif
],
    AC_MSG_RESULT(yes),
    [ AC_EGREP_CPP(yes,
[#define BSD_COMP
#include <sys/ioctl.h>
#ifdef FIONBIO
 yes
#endif
],
    AC_DEFINE(BSD_COMP)  AC_MSG_RESULT(need -DBSD_COMP),
    AC_MSG_RESULT(no))
    ])

dnl ------------------------------------------------------------
dnl Checks for compiler characteristics.
dnl ------------------------------------------------------------
AC_C_BIGENDIAN

dnl ------------------------------------------------------------
dnl Checks for library functions.
dnl ------------------------------------------------------------

AC_CHECK_FUNCS(vasprintf)

AC_CHECK_FUNCS(atoll)
AC_MSG_CHECKING(if 64-bit arithmetic is available)
AC_EGREP_CPP(yes,
[#if HAVE_ATOLL || SIZEOF_LONG == 8
 yes
 #else
 no
#endif
], AC_MSG_RESULT(yes)
 , AC_MSG_RESULT(no)
   AC_MSG_WARN([SQL Server 2000 "bigint" 8-byte integer will not work]))


dnl ------------------------------------------------------------
dnl Compile time options
dnl ------------------------------------------------------------
AC_MSG_RESULT(checking compile-time options)

AC_ARG_WITH(tdsver,
[  --with-tdsver=VERSION   TDS protocol version (4.2/4.6/5.0/7.0/8.0) [5.0]])
if test "$with_tdsver" = "4.2"; then
	CFLAGS="$CFLAGS -DTDS42"
elif test "$with_tdsver" = "4.6"; then
	CFLAGS="$CFLAGS -DTDS46"
elif test "$with_tdsver" = "7.0"; then
	CFLAGS="$CFLAGS -DTDS70"
elif test "$with_tdsver" = "8.0"; then
	CFLAGS="$CFLAGS -DTDS80"
else
	CFLAGS="$CFLAGS -DTDS50"
fi

AC_ARG_WITH(iodbc,
[  --with-iodbc=DIR        build odbc driver against iODBC in DIR])
if test "$with_iodbc"; then
	CFLAGS="$CFLAGS -DIODBC";
	ODBC_INC=$with_iodbc/include;
	odbc=true
fi

AC_ARG_WITH(unixodbc,
[  --with-unixodbc=DIR     build odbc driver against unixODBC in DIR])
if test "$with_unixodbc"; then
	CFLAGS="$CFLAGS -DUNIXODBC"
	ODBC_INC=$with_unixodbc/include
	odbc=true
	unixodbc=true
fi
AM_CONDITIONAL(ODBC, test x$odbc = xtrue)
AM_CONDITIONAL(UNIXODBC, test x$unixodbc = xtrue)
AC_SUBST(ODBC)
AC_SUBST(ODBC_INC)

AC_ARG_ENABLE(msdblib,
  [  --enable-msdblib        for MS style dblib])

if test "$enable_msdblib" = "yes" ; then
	CFLAGS="$CFLAGS -DMSDBLIB"
fi

AC_ARG_ENABLE(sybase-compat,
  [  --enable-sybase-compat  enable increased Open Client binary compatibility])
AM_CONDITIONAL(SYBASE_COMPAT, test x$enable_sybase_compat = xyes)

AC_MSG_CHECKING(threadsafety)
dnl Enable or disable thread safetiness
dnl This option is not enabled for default because some 
dnl implementation or reentrant api are not very safe
AC_ARG_ENABLE(threadsafe,
  [  --enable-threadsafe     compile for thread safety [default=no]])
if test "$enable_threadsafe" = "yes" ; then
	CFLAGS="$CFLAGS -D_REENTRANT -D_THREAD_SAFE"
	AC_MSG_RESULT(enabled)
else
	AC_MSG_RESULT(disabled)
fi

AC_caolan_FUNC_WHICH_GETHOSTBYNAME_R
AC_raf_FUNC_WHICH_GETSERVBYNAME_R
AC_tds_FUNC_WHICH_GETHOSTBYADDR_R

AC_MSG_RESULT(done)
dnl ------------------------------------------------------------
dnl Final output
dnl ------------------------------------------------------------
AC_OUTPUT(include/tdsver.h include/tds.h \
	Makefile \
	include/Makefile \
	doc/Makefile \
	src/Makefile \
		src/tds/Makefile src/tds/unittests/Makefile \
		src/dblib/Makefile src/dblib/unittests/Makefile \
		src/ctlib/Makefile src/ctlib/unittests/Makefile \
	src/server/Makefile \
	src/pool/Makefile \
	src/odbc/Makefile \
	src/odbc/unittests/Makefile \
	src/apps/Makefile \
	freetds.spec
)
