dnl Process this file with autoconf to produce a configure script.

dnl ------------------------------------------------------------
dnl $Id: configure.in,v 1.101 2003/07/19 23:38:44 jklowden Exp $
dnl If you're trying to create a new configure test, try
dnl
dnl 	http://autogen.sourceforge.net/conftest.html
dnl ------------------------------------------------------------

dnl ------------------------------------------------------------
dnl Initialization
dnl ------------------------------------------------------------
AC_INIT(src/dblib/dblib.c)
AC_PREREQ(2.53)
define(TDSDATE, esyscmd(echo -n $(date +"%Y%m%d")))
AM_INIT_AUTOMAKE(freetds, 0.62.dev.TDSDATE)
AM_CONFIG_HEADER(include/config.h)
AC_PREFIX_DEFAULT(/usr/local)

dnl configuration directory will be /usr/local/etc

dnl ------------------------------------------------------------
dnl Host-specific configuration
dnl ------------------------------------------------------------
AC_CANONICAL_HOST
netdb_reentrant=no
case $host in
  *-*-osf*)
    CPPFLAGS="$CPPFLAGS -D_OSF_SOURCE -D_XOPEN_SOURCE_EXTENDED -D_POSIX_C_SOURCE=199506L"
    netdb_reentrant=yes
    ;;
  *-*-hpux11*)
    CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE_EXTENDED"
    netdb_reentrant=yes
    ;;
esac

if test $netdb_reentrant = yes; then 
    AC_DEFINE(NETDB_REENTRANT, 1, [Define to 1 if the BSD-style netdb interface is reentrant.])
fi

AC_GNU_SOURCE

dnl ------------------------------------------------------------
dnl Flag to include library-private definitions
dnl ------------------------------------------------------------
CPPFLAGS="$CPPFLAGS -D_FREETDS_LIBRARY_SOURCE"

dnl ------------------------------------------------------------
dnl Checks for programs.
dnl ------------------------------------------------------------
AC_PROG_CC
AC_PROG_CPP
AM_PROG_LIBTOOL
AM_ICONV
dnl test if we have doxygen installed
AC_CHECK_PROG(DOXYGEN,doxygen,doxygen)
AM_CONDITIONAL(HAVE_DOXYGEN, [test -n "$DOXYGEN"])

dnl ------------------------------------------------------------
dnl Checks for libraries.
dnl ------------------------------------------------------------
AC_CHECK_LIB(socket, socket, NETWORK_LIBS="$NETWORK_LIBS -lsocket")
AC_CHECK_LIB(nsl, gethostbyname, NETWORK_LIBS="$NETWORK_LIBS -lnsl")
AC_SUBST(NETWORK_LIBS)

dnl readline test
dnl Readline is needed by the tty session. Set up a special RL_LIBS
dnl substitution for it.
OLDLIBS="$LIBS"
dnl Readline is linked with curses, and on some systems termcap must be
dnl linked in. Others (inc debian) have termcap built into ncurses.
LIBS=""
AC_SEARCH_LIBS(tgetent, [readline ncurses curses termcap])
AC_CHECK_LIB([readline], [readline], [LIBS="$LIBS -lreadline"
  AC_DEFINE(HAVE_READLINE, 1, [Define to 1 if you have the GNU Readline library.])] )
READLINE_LIBS="$LIBS"
AC_SUBST(READLINE_LIBS)
LIBS="$OLDLIBS"


dnl ------------------------------------------------------------
dnl Checks for header files.
dnl ------------------------------------------------------------
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(errno.h sys/time.h malloc.h sys/types.h sys/socket.h)
AC_CHECK_HEADERS(arpa/inet.h netdb.h netinet/in.h langinfo.h paths.h)
AC_CHECK_HEADERS(sys/ioctl.h libgen.h sys/param.h locale.h odbcss.h)
AC_CHECK_HEADERS(sys/select.h)
AC_HAVE_INADDR_NONE

dnl ------------------------------------------------------------
dnl Checks for integers/floats of different sizes
dnl ------------------------------------------------------------
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(__int64)

case 2 in
$ac_cv_sizeof_short)   tds_sysdep_int16_type=short;;
$ac_cv_sizeof_int)     tds_sysdep_int16_type=int;;
*)                     AC_ERROR(No 16-bit int found.)
esac

case 4 in
$ac_cv_sizeof_short)   tds_sysdep_int32_type=short;;
$ac_cv_sizeof_int)     tds_sysdep_int32_type=int;;
$ac_cv_sizeof_long)    tds_sysdep_int32_type=long;;
*)                     AC_ERROR(No 32-bit int found.)
esac

case 4 in
$ac_cv_sizeof_float)       tds_sysdep_real32_type=float;;
$ac_cv_sizeof_double)      tds_sysdep_real32_type=double;;
$ac_cv_sizeof_long_double) tds_sysdep_real32_type="long double";;
*)                     AC_ERROR(No 32-bit real found.)
esac

case 8 in
$ac_cv_sizeof_float)       tds_sysdep_real64_type=float;;
$ac_cv_sizeof_double)      tds_sysdep_real64_type=double;;
$ac_cv_sizeof_long_double) tds_sysdep_real64_type="long double";;
*)                     AC_ERROR(No 64-bit real found.)
esac

case 8 in
$ac_cv_sizeof_long)      tds_sysdep_int64_type=long;;
$ac_cv_sizeof_long_long) tds_sysdep_int64_type="long long";;
$ac_cv_sizeof___int64)   tds_sysdep_int64_type=__int64;;
esac
if test "$tds_sysdep_int64_type"; then
    AC_DEFINE(HAVE_INT64, 1, [Define to 1 if you have a 64-bit integral type.])
else
    tds_sysdep_int64_type=long
    AC_MSG_WARN([SQL Server 2000 "bigint" 8-byte integer will not work])
fi

AC_SUBST(tds_sysdep_int16_type)
AC_SUBST(tds_sysdep_int32_type)
AC_SUBST(tds_sysdep_real32_type)
AC_SUBST(tds_sysdep_real64_type)
AC_SUBST(tds_sysdep_int64_type)

dnl ------------------------------------------------------------
dnl Checks for typedefs and structures
dnl ------------------------------------------------------------

dnl ---- Solaris needs -DBSD_COMP to get FIONBIO defined ----
AC_MSG_CHECKING(is FIONBIO defined)
AC_EGREP_CPP(yes,
[#include <sys/ioctl.h>
#ifdef FIONBIO
 yes
#endif
],
    AC_MSG_RESULT(yes),
    [ AC_EGREP_CPP(yes,
[#define BSD_COMP
#include <sys/ioctl.h>
#ifdef FIONBIO
 yes
#endif
],
    AC_DEFINE(BSD_COMP, 1, [Define to 1 if you need BSD_COMP defined to get FIONBIO defined.]) AC_MSG_RESULT(need -DBSD_COMP),
    AC_MSG_RESULT(no))
    ])

dnl ------------------------------------------------------------
dnl Checks for compiler characteristics.
dnl ------------------------------------------------------------
AC_C_BIGENDIAN
AC_C_CONST

dnl ------------------------------------------------------------
dnl Checks for library functions.
dnl ------------------------------------------------------------
AC_CHECK_FUNCS(_vbprintf _bprintf)
AC_CHECK_FUNCS(vsnprintf gettimeofday gethostname sethostent_r gethostent_r)
AC_CHECK_FUNCS(nl_langinfo)
AC_CHECK_FUNCS(locale_charset)
AC_CHECK_FUNCS(getuid getpwuid getpwuid_r)
AC_REPLACE_FUNCS(asprintf vasprintf atoll strtok_r)

dnl ------------------------------------------------------------
dnl Checks for library variables.
dnl ------------------------------------------------------------
AC_HAVE_MALLOC_OPTIONS

dnl ------------------------------------------------------------
dnl Compile time options
dnl ------------------------------------------------------------
AC_MSG_RESULT(checking compile-time options)

AC_ARG_WITH(tdsver,
[  --with-tdsver=VERSION   TDS protocol version (4.2/4.6/5.0/7.0/8.0) [5.0]])
if test "$with_tdsver" = "4.2"; then
	CPPFLAGS="$CPPFLAGS -DTDS42"
elif test "$with_tdsver" = "4.6"; then
	CPPFLAGS="$CPPFLAGS -DTDS46"
elif test "$with_tdsver" = "7.0"; then
	CPPFLAGS="$CPPFLAGS -DTDS70"
elif test "$with_tdsver" = "8.0"; then
	CPPFLAGS="$CPPFLAGS -DTDS80"
else
	CPPFLAGS="$CPPFLAGS -DTDS50"
fi

AC_ARG_WITH(iodbc,
[  --with-iodbc=DIR        build odbc driver against iODBC in DIR])
if test "$with_iodbc"; then
	if echo "$with_iodbc" | grep -v '^/'; then
		with_iodbc="$PWD/$with_iodbc"
	fi
	CPPFLAGS="$CPPFLAGS -DIODBC"
	ODBC_INC=$with_iodbc/include
	LDFLAGS="$LDFLAGS -L$with_iodbc/lib"
	odbc=true
fi

AC_ARG_WITH(unixodbc,
[  --with-unixodbc=DIR     build odbc driver against unixODBC in DIR])
if test "$with_unixodbc"; then
	if echo "$with_unixodbc" | grep -v '^/'; then
		with_unixodbc="$PWD/$with_unixodbc"
	fi
	CPPFLAGS="$CPPFLAGS -DUNIXODBC"
	ODBC_INC=$with_unixodbc/include
	LDFLAGS="$LDFLAGS -L$with_unixodbc/lib"
	odbc=true
	unixodbc=true
fi

# odbc not specified, try to detect it
if test x$odbc != xtrue; then
	AC_CHECK_LIB(iodbc, SQLConnect, [odbc=true
CPPFLAGS="$CPPFLAGS -DIODBC"], 
	AC_CHECK_LIB(odbc, SQLConnect, [odbc=true
unixodbc=true
CPPFLAGS="$CPPFLAGS -DUNIXODBC"]))
fi
if test x$odbc = xtrue; then
	save_LIBS="$LIBS"
	if test x$unixodbc = xtrue; then
		LIBS="$LIBS -lodbcinst"
	else
		LIBS="$LIBS -liodbcinst"
	fi
	AC_CHECK_FUNCS(SQLGetPrivateProfileString)
	LIBS="$save_LIBS"
fi

AM_CONDITIONAL(ODBC, test x$odbc = xtrue)
AM_CONDITIONAL(UNIXODBC, test x$unixodbc = xtrue)
AC_SUBST(ODBC)
AC_SUBST(ODBC_INC)

AC_ARG_ENABLE(apps,
	AC_HELP_STRING([--disable-apps], [skip build of src/apps (including tsql)]))
AM_CONDITIONAL(INCAPPS, test "$enable_apps" != "no")

AC_ARG_ENABLE(server,
	AC_HELP_STRING([--disable-server], [skip build of src/server directory]))
AM_CONDITIONAL(INCSERVER, test "$enable_server" != "no")

AC_ARG_ENABLE(pool,
	AC_HELP_STRING([--disable-pool], [skip build of src/pool directory]))
 AM_CONDITIONAL(INCPOOL, test "$enable_pool" != "no")

AC_ARG_ENABLE(msdblib,
  [  --enable-msdblib        for MS style dblib])

if test "$enable_msdblib" = "yes" ; then
	CPPFLAGS="$CPPFLAGS -DMSDBLIB"
fi

AC_ARG_ENABLE(sybase-compat,
  [  --enable-sybase-compat  enable increased Open Client binary compatibility])
AM_CONDITIONAL(SYBASE_COMPAT, test x$enable_sybase_compat = xyes)

AC_MSG_CHECKING(threadsafety)
dnl Enable or disable thread safetiness
dnl This option is not enabled for default because some 
dnl implementation or reentrant api are not very safe
AC_ARG_ENABLE(threadsafe,
  [  --enable-threadsafe     compile for thread safety [default=yes]])
if test "$enable_threadsafe" = "no" ; then
	AC_MSG_RESULT(disabled)
else
	CPPFLAGS="$CPPFLAGS -D_REENTRANT -D_THREAD_SAFE"
	AC_MSG_RESULT(enabled)
fi

AC_caolan_FUNC_WHICH_GETHOSTBYNAME_R
AC_raf_FUNC_WHICH_GETSERVBYNAME_R
AC_tds_FUNC_WHICH_GETHOSTBYADDR_R
AC_tds_FUNC_WHICH_GETPWUID_R
AC_tds_FUNC_WHICH_LOCALTIME_R

AC_ARG_ENABLE(debug,
  [  --enable-debug          enable assert and other things [default=yes]])
if test "$enable_debug" = "no" ; then
        CPPFLAGS="$CPPFLAGS -DNDEBUG=1"
else
        CPPFLAGS="$CPPFLAGS -DDEBUG=1"
fi

AC_ARG_ENABLE(extra-checks,
  [  --enable-extra-checks   enable extra checks on code])
if test "$enable_extra_checks" = "yes" ; then
	AC_DEFINE_UNQUOTED(ENABLE_EXTRA_CHECKS, 1, [Define to enable extra checks on code])
fi

AC_ARG_ENABLE(developing,
  [  --enable-developing     enable code still in develop])
if test "$enable_developing" = "yes" ; then
	AC_DEFINE_UNQUOTED(ENABLE_DEVELOPING, 1, [Define to enable work in progress code])
fi

AC_ARG_ENABLE(distcheck_build,
  [  --enable-distcheck-build used internally for testing])
if test "$enable_distcheck_build" = "yes" ; then
	AM_CONDITIONAL(DISTCHECK_BUILD, true)
else
	AM_CONDITIONAL(DISTCHECK_BUILD, false)
fi

dnl ------------------------------------------------------------
dnl LTLIBOBJS hack (for autoconf-2.53)
dnl ------------------------------------------------------------
# This is necessary so that .o files in LIBOBJS are also built via
# the ANSI2KNR-filtering rules.
LIB@&t@OBJS=`echo "$LIB@&t@OBJS" |
             sed 's,\.[[^.]]* ,$U&,g;s,\.[[^.]]*$,$U&,'`
LTLIBOBJS=`echo "$LIB@&t@OBJS" |
           sed 's,\.[[^.]]* ,.lo ,g;s,\.[[^.]]*$,.lo,'`
AC_SUBST(LTLIBOBJS)

# enable some warning for gcc
if test "$ac_compiler_gnu" = "yes" ; then
	CPPFLAGS="$CPPFLAGS -Wall -Wstrict-prototypes -Wmissing-prototypes"
fi

AC_MSG_RESULT(done)
dnl ------------------------------------------------------------
dnl Final output
dnl ------------------------------------------------------------
AC_OUTPUT(include/tdsver.h \
	include/tds_sysdep_public.h \
	Makefile \
	include/Makefile \
	doc/Makefile \
	samples/Makefile \
	src/Makefile \
		src/tds/Makefile src/tds/unittests/Makefile \
		src/dblib/Makefile src/dblib/unittests/Makefile \
		src/ctlib/Makefile src/ctlib/unittests/Makefile \
		src/replacements/Makefile \
	src/server/Makefile \
	src/pool/Makefile \
	src/odbc/Makefile \
	src/odbc/unittests/Makefile \
	src/apps/Makefile \
	freetds.spec \
	win32/Makefile win32/msvc6/Makefile win32/dev-cpp/Makefile
)
