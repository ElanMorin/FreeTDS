Well.. I don't know how to put these information so I'll put here
Probably I'm the only person who can fully understand these notes...

Fixes
-----
IMPORTANT fix done_handling
ODBC RPC check (+chained rpcs?? see below)

Cursor and dynamic
------------------
libTDS should handle real cursor/dynamic memory deallocation
search for tds_alloc_cursor, tds_free_cursor and similar for dynamic
cursor too complicate... reduce all states, handle more in libTDS
Tests:
 - multiple RPCs check returns (possible??)
   (see odbc_set_return_status, odbc_set_return_params and odbc_get_param_len
   calls)
   add multiple chained RPCs for odbc and mssql7+...
 - cursor update and multiple tables (using view)
ODBC cursor check (cfr "Progress on CVS")
  search "TODO read results, set row count, check type and scroll returned"
http://support.microsoft.com/kb/246265/en-us
http://support.microsoft.com/kb/290413/en-us
http://support.microsoft.com/kb/238336/en-us

Row handling
------------
Upper layer should be able to read data from network and handle rows
Possibility to stop sending/receiving data for SQLPutData and similar
Allow upper layer to get if libTDS is sending a request (add new state??)
tds_process_tokens should "return" any row/done/other informations,
not only done_flags
libTDS should handle multiple reply from server (cursors and so on)

Token handling
--------------
Split token.c to one base token handling and another with higher
level (callbacks, state and so on)
See James propos about tds_read_results

Done handling
-------------
Callback when state goes to IDLE
Free unused cursors and dynamic and/or reuse them

ODBC SQL_C_CHAR with wide
-------------------------
Check iso8859-1 for single ??
test to review
- data.c (char -> sql_c_char) DONE
- genparams.c
- getdata.c ??
- putdata.c ??
- wchar.c
- blob1.c (SQLGetData test with binary -> char and between chars)
Is it possible to support direct binding for parameters using different
encodings? For instance client <-> server iso8859-1 <-> ucs2. It should be
possible changing TDSCOLUMN->char_conv. Some work should be done in 
src/tds/iconv.c in order to get a valid char_conv changing client encoding.

Other
-----
Implement some sort of fast write to network writing directly to 
wire buffer. It would be helpful to have "lock" length size, write to
wire, write length, "unlock". Also a function to get current position (to
compute lengths).

build an array of "flags" to translate type -> flag like SYBCHAR ->
char, variable and so on

Possibility to lock TDSSOCKET (see odbc, multiple RPCs)

Support Unicode under ODBC, use iso8859-1 by default and large characters


Tests
-----
Rebuild all test support (virtual machines, chroot, msde+mssql2005)
Add a test for rpm (redhat, suse?)
disabling thread safety don't check for thread-safe functions
check cross compiled odbc driver, exports, resource version (test-dist)
